Advanced looping


rep(function, times)
replicate(times, function)

seq_along(list)

lapply(list_var, function) # returns a list
vapply(list_var, function, template(eg. numeric(1))) # returns vector with each of same length

sapply(list_var, function) # return type depends on requirement/ function passed
Weird - sapply(list(), length) # returns a list - empty - use vapply here

env <- new.env()
env$molien <- c(1, 0, 1, 0, 1, 1, 2, 1, 3) #See http://oeis.org/A008584 env$larry <- c("Really", "leery", "rarely", "Larry")
eapply(env, length)

> apply(magic4, 1, sum)
[1] 34 34 34 34
> apply(magic4, 2, sum)
[1] 34 34 34 34
> apply(magic4, 2, toString)
[1] "16, 5, 9, 4"  "2, 11, 7, 14" "3, 10, 6, 15" "13, 8, 12, 1"
> apply(magic4, 1, toString)
[1] "16, 2, 3, 13" "5, 11, 10, 8" "9, 7, 6, 12"  "4, 14, 15, 1"

mapply(rep, c(1,2,3,4,5), 1:5)	# passing multiple args
[[1]]
[1] 1

[[2]]
[1] 2 2

[[3]]
[1] 3 3 3

[[4]]
[1] 4 4 4 4

[[5]]
[1] 5 5 5 5 5

mapply - Vectorize() converts scalar input functions to accept vector inputs

unlist() - list to vector

 with(frogger_scores, tapply(score, player, mean))    # data, split_col, function

 plyr package
 ddply(
frogger_scores,
.(player),
colwise(mean) #call mean on every column except player
)

ddply(
frogger_scores,
.(player),
summarize,
mean_score = mean(score), #call mean on score max_level = max(level) #... and max on level
)


POSIXct and POSIXlt.

moon_landings_str <- c(
      "20:17:40 20/07/1969",
      "06:54:35 19/11/1969",
      "09:18:11 05/02/1971",
      "22:16:29 30/07/1971",
      "02:23:35 21/04/1972",
      "19:54:57 11/12/1972"
    )
    (moon_landings_lt <- strptime(
      moon_landings_str,
      "%H:%M:%S %d/%m/%Y",
      tz = "UTC"
))

In the following example, %I is the hour (12-hour system), %p is the AM/PM indicator, %A is the full name of the day of the week, and %B is the full name of the month. strftime works with both POSIXct and POSIXlt inputs:
    strftime(now_ct, "It's %I:%M%p on %A %d %B, %Y.")
    ## [1] "It's 10:47PM on Wednesday 17 July, 2013."


now_ct + 86400 #Tomorrow. I wonder what the world will be like! ## [1] "2013-07-18 22:47:01 BST"
now_lt + 86400 #Same behavior for POSIXlt
## [1] "2013-07-18 22:47:01 BST"
now_date + 1 #Date arithmetic is in days
    ## [1] "2013-07-18"

difftime(the_end_of_time, the_start_of_time, units = "secs")

seq(the_start_of_time, the_end_of_time, by = "1 year")
seq(the_start_of_time, the_end_of_time, by = "500 days")


lubridate
> ymd("Pankesh1992Month12ello17")
[1] NA
Warning message:
All formats failed to parse. No formats found. 
> ymd("1992#12#17")
[1] "1992-12-17 UTC"
> ymd("1992#-12#-17")
[1] "1992-12-17 UTC"
> ymd("1992#-#12#-#17")
[1] "1992-12-17 UTC"
> ymd("1992//12//17")
[1] "1992-12-17 UTC"
> ymd("Pankesh+1992Month+12Day+17")
[1] "1992-12-17 UTC"


 date_format_function <- stamp("A moon landing occurred on Monday 01 January 1900 at 18:00:00.")
    ## Multiple formats matched: "A moon landing occurred on %A %m January %d%y
    ## at %H:%M:%OS"(1), "A moon landing occurred on %A %m January %Y at
    ## %d:%H:%M."(1), "A moon landing occurred on %A %d %B %Y at %H:%M:%S."(1)
    ## Using: "A moon landing occurred on %A %d %B %Y at %H:%M:%S."
    date_format_function(moon_landings_lt)
    ## [1] "A moon landing occurred on Sunday 20 July 1969 at 20:17:40."

(duration_one_to_ten_years <- dyears(1:10))
    ##  [1] "31536000s (~365 days)"   "63072000s (~730 days)"
    ##  [3] "94608000s (~1095 days)"  "126144000s (~1460 days)"
    ##  [5] "157680000s (~1825 days)" "189216000s (~2190 days)"
    ##  [7] "220752000s (~2555 days)" "252288000s (~2920 days)"
    ##  [9] "283824000s (~3285 days)" "315360000s (~3650 days)"
    today() + duration_one_to_ten_years
    ##  [1] "2014-07-17" "2015-07-17" "2016-07-16" "2017-07-16" "2018-07-16"
## [6] "2019-07-16" "2020-07-15" "2021-07-15" "2022-07-15" "2023-07-15"

(period_one_to_ten_years <- years(1:10))
##  [1] "1y 0m 0d 0H 0M 0S"
##  [4] "4y 0m 0d 0H 0M 0S"
##  [7] "7y 0m 0d 0H 0M 0S"
## [10] "10y 0m 0d 0H 0M 0S"
"2y 0m 0d 0H 0M 0S"
"5y 0m 0d 0H 0M 0S"
"8y 0m 0d 0H 0M 0S"


start_date <- ymd("2016-02-28")
    (interval_over_leap_year <- new_interval(
start_date,
      start_date + a_year
    ))

ymd("2016-02-28") %--% ymd("2016-03-01") #another way to specify interval ## [1] 2016-02-28 UTC--2016-03-01 UTC
ymd("2016-02-29") %within% interval_over_leap_year
## [1] TRUE

with_tz(now_lt, tz = "America/Los_Angeles")
    ## [1] "2013-07-17 14:47:01 PDT"

  
