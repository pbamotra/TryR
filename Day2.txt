?, ??, apropos, browseVignettes and RSiteSearch

1:5 + 6:10

identical(2^3, 2**3)

1:10 / 3
%/% - integer division
%%  - remainder

factorial()
c(3, 4 - 1, 1 + 1 + 1) == 3

isTRUE(all.equal(sqrt(2) ^ 2, 3))

kind of global variable declaration <<-
assign("my_global_variable", 1 ^ 3 + 12 ^ 3, globalenv())

is.finite(x)

TRUTH TABLE
-----------
x <- c(TRUE, FALSE, NA) 						#the three logical values
xy <- expand.grid(x = x, y = x) 				#get all combinations of x and y
within( xy,										#make the next assignments within xy
{
and <- x & y or <-x|y not.y <- !y not.x <- !x
} )

any() - atleast one true , all()				


gender_char <- sample(c("female", "male"), 10000, replace = TRUE)


    as.raw(1:17)
    ##  [1] 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11

      (sushi <- charToRaw("Fish!"))
    ## [1] 46 69 73 68 21

ls(pattern = "^is", baseenv())

 num <- runif(30)
 letters[1:5]

View(dfr)                  #no changes allowed
new_dfr <- edit(dfr)		#changes stored in new_dfr
fix(dfr)					#changes stored in dfr


numeric(5) ~  vector("numeric", 5)

seq.int(3, 12, 2)
seq_len(n)  - sequence of length N starting from 1
for(i in seq_along(pp)) print(pp[i])

sn <- c("Sheena", "leads", "Sheila", "needs")
    length(sn)				## [1] 4
    nchar(sn)				## [1] 6 5 6 5


 The which function returns the locations where a logical vector is TRUE. This can be
useful for switching from logical indexing to integer indexing:
    which(x > 10)

    which.min(x)/ max

     rep(1:5, 3)
    ##  [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5
    rep(1:5, each = 3)
    ##  [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5
    rep(1:5, times = 1:5)
    ##  [1] 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5
    rep(1:5, length.out = 7)						~ rep_len(1:5, 13)
    ## [1] 1 2 3 4 5 1 2

 (three_d_array <- array(
      1:24,
      dim = c(4, 3, 2),
      dimnames = list(
        c("one", "two", "three", "four"),
        c("ein", "zwei", "drei"),
        c("un", "deux")
) ))

matrix(
      1:12,
nrow = 4,
byrow = TRUE, dimnames = list(
        c("one", "two", "three", "four"),
        c("ein", "zwei", "drei")
      )
)

NROW and NCOL are counterparts to nrow and ncol 

rownames/ colnames/ dimnames

(inverse_of_m <- solve(m))
